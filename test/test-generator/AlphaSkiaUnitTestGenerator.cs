using System.Text;
using System.Text.Unicode;
using AlphaTab;
using AlphaTab.Importer;
using AlphaTab.Model;
using AlphaTab.Rendering;

namespace TestGenerator;

public class AlphaSkiaUnitTestGenerator
{
    private static (List<double[]> partialPositions, double totalWidth, double totalHeight) GenerateTestCode(
        Settings settings)
    {
        settings.Core.UseWorkers = false;
        settings.Core.EnableLazyLoading = false;

        // custom fonts
        settings.Display.Resources.CopyrightFont.Families = new[] { "Noto Sans", "Noto Music", "Noto Color Emoji" };
        settings.Display.Resources.TitleFont.Families = new[] { "Noto Serif", "Noto Music", "Noto Color Emoji" };
        settings.Display.Resources.SubTitleFont.Families = new[] { "Noto Serif", "Noto Music", "Noto Color Emoji" };
        settings.Display.Resources.WordsFont.Families = new[] { "Noto Serif", "Noto Music", "Noto Color Emoji" };
        settings.Display.Resources.EffectFont.Families = new[] { "Noto Serif", "Noto Music", "Noto Color Emoji" };
        settings.Display.Resources.FretboardNumberFont.Families =
            new[] { "Noto Sans", "Noto Music", "Noto Color Emoji" };
        settings.Display.Resources.TablatureFont.Families = new[] { "Noto Sans", "Noto Music", "Noto Color Emoji" };
        settings.Display.Resources.GraceFont.Families = new[] { "Noto Sans", "Noto Music", "Noto Color Emoji" };
        settings.Display.Resources.BarNumberFont.Families = new[] { "Noto Sans", "Noto Music", "Noto Color Emoji" };
        settings.Display.Resources.FingeringFont.Families = new[] { "Noto Serif", "Noto Music", "Noto Color Emoji" };
        settings.Display.Resources.MarkerFont.Families = new[] { "Noto Serif", "Noto Music", "Noto Color Emoji" };

        // add some colors to ensure we test this as well
        settings.Display.Resources.ScoreInfoColor = new Color(153, 204, 30);
        settings.Display.Resources.BarSeparatorColor = new Color(153, 51, 204, 100);

        var scoreRenderer = new ScoreRenderer(settings)
        {
            Width = 1300
        };

        using var testFileStream =
            typeof(AlphaSkiaUnitTestGenerator).Assembly.GetManifestResourceStream("TestGenerator.TestFile.gp");
        var buffer = new byte[testFileStream!.Length];
        testFileStream.ReadExactly(buffer);

        var score = ScoreLoader.LoadScoreFromBytes(buffer, settings);

        // inject some unicode characters for fallback font 
        score.Tracks[0].Staves[0].Bars[7].Voices[0].Beats[0].Text =
            score.Tracks[0].Staves[0].Bars[7].Voices[0].Beats[0].Text!.Replace("%UNICODE%",
                // From Musical Symbols unicode block
                // 𝄞  𝅘𝅥
                // And some emojis
                // 🎸 🤘🏻
                "\U0001D11E \U0001D15F \U0001F3B8 \U0001F918\U0001F3FB"
            );

        List<double[]> partialPositions = new List<double[]>();

        var totalWidth = 0.0;
        var totalHeight = 0.0;

        void HandleResult(RenderFinishedEventArgs e)
        {
            if (e.RenderResult != null)
            {
                totalWidth = e.TotalWidth;
                totalHeight = e.TotalHeight;
                partialPositions.Add(new[] { e.X, e.Y, e.Width, e.Height });
            }
        }

        scoreRenderer.RenderFinished.On(HandleResult);
        scoreRenderer.PartialRenderFinished.On(HandleResult);

        Exception? renderError = null;
        scoreRenderer.Error.On(error =>
        {
            renderError = error;
        });

        scoreRenderer.RenderScore(score, new double[] { 0 });
        if (renderError != null)
        {
            throw renderError;
        }

        return (
            partialPositions,
            totalWidth,
            totalHeight
        );
    }

    public static string GenerateCSharp()
    {
        var settings = new Settings
        {
            Core =
            {
                Engine = "CSharpTestCode"
            }
        };
        var sourceCode = new CSharpTestSourceBuilder();
        AlphaTab.Environment.RenderEngines.Set(
            settings.Core.Engine,
            new RenderEngineFactory(false, () => new AlphaSkiaTestCanvas(sourceCode))
        );

        sourceCode.Resume();
        sourceCode.WriteLine("// <auto-generated>");
        sourceCode.WriteLine("// This file has been auto generated by a unit test in alphaTab.");
        sourceCode.WriteLine("// </auto-generated>");
        sourceCode.WriteLine("#nullable enable");
        sourceCode.WriteLine();
        sourceCode.WriteLine("namespace AlphaSkia.Test;");
        sourceCode.WriteLine();
        sourceCode.WriteLine("partial class AlphaTabGeneratedRenderTest");
        sourceCode.BeginBlock();
        sourceCode.Suspend();

        var result = GenerateTestCode(settings);

        sourceCode.Resume();
        sourceCode.WriteLine("public static float[,] PartPositions => new float[,] {");

        sourceCode.WriteLine(string.Join(", ",
            result.partialPositions.Select(p => "{" + string.Join(", ", p.Select(v => $"(float){v}")) + "}")));
        sourceCode.WriteLine("    };");
        sourceCode.WriteLine($"public static int TotalWidth => (int){result.totalWidth};");
        sourceCode.WriteLine($"public static int TotalHeight => (int){result.totalHeight};");
        sourceCode.WriteLine("public static Func<AlphaSkiaCanvas, AlphaSkiaImage?>[] AllParts => new[]");
        sourceCode.BeginBlock();
        var parts = result.partialPositions.Select((_, i) => $"DrawMusicSheetPart{i + 1}");
        sourceCode.WriteLine(string.Join(", ", parts));

        sourceCode.EndBlock(true);
        sourceCode.EndBlock();
        sourceCode.Suspend();

        return sourceCode.ToString();
    }

    public static string GenerateJava()
    {
        var settings = new Settings
        {
            Core =
            {
                Engine = "JavaTestCode"
            }
        };
        var sourceCode = new JavaTestSourceBuilder();
        AlphaTab.Environment.RenderEngines.Set(
            settings.Core.Engine,
            new RenderEngineFactory(false, () => new AlphaSkiaTestCanvas(sourceCode))
        );

        sourceCode.Resume();
        sourceCode.WriteLine("package alphaTab.alphaSkia.test;");
        sourceCode.WriteLine();
        sourceCode.WriteLine("import alphaTab.alphaSkia.*;");
        sourceCode.WriteLine();
        sourceCode.WriteLine("public class AlphaTabGeneratedRenderTest extends AlphaTabGeneratedRenderTestBase");
        sourceCode.BeginBlock();
        sourceCode.Suspend();

        var result = GenerateTestCode(settings);

        sourceCode.Resume();
        sourceCode.WriteLine("public static float[][] getPartPositions()");
        sourceCode.BeginBlock();
        {
            sourceCode.WriteLine("return new float[][]");
            sourceCode.BeginBlock();
            {
                sourceCode.WriteLine(string.Join(", ",
                    result.partialPositions.Select(p => "{" + string.Join(", ", p.Select(v => $"(float){v}")) + "}")));
            }
            sourceCode.EndBlock(true);
        }
        sourceCode.EndBlock();

        sourceCode.WriteLine($"public static int getTotalWidth() {{ return (int){result.totalWidth}; }}");
        sourceCode.WriteLine($"public static int getTotalHeight() {{ return (int){result.totalHeight}; }}");
        sourceCode.WriteLine("public static RenderFunction[] getAllParts()");
        sourceCode.BeginBlock();
        {
            sourceCode.WriteLine("return new RenderFunction[]");
            sourceCode.BeginBlock();
            {
                var parts = result.partialPositions.Select((_, i) =>
                    $"AlphaTabGeneratedRenderTest::drawMusicSheetPart{i + 1}");
                sourceCode.WriteLine(string.Join(", ", parts));
            }
            sourceCode.EndBlock(true);
        }
        sourceCode.EndBlock();

        sourceCode.EndBlock();
        sourceCode.Suspend();

        return sourceCode.ToString();
    }

    public static string GenerateTypeScript()
    {
        var settings = new Settings
        {
            Core =
            {
                Engine = "TypeScriptTestCode"
            }
        };
        var sourceCode = new TypeScriptTestSourceBuilder();
        AlphaTab.Environment.RenderEngines.Set(
            settings.Core.Engine,
            new RenderEngineFactory(false, () => new AlphaSkiaTestCanvas(sourceCode))
        );

        sourceCode.Resume();

        sourceCode.WriteLine("import TestBase from './AlphaTabGeneratedRenderTestBase'; ");
        sourceCode.WriteLine(
            "import { AlphaSkiaTextBaseline, AlphaSkiaTextAlign, AlphaSkiaCanvas, AlphaSkiaImage } from '@coderline/alphaskia'; ");
        sourceCode.WriteLine();

        sourceCode.Suspend();

        var result = GenerateTestCode(settings);

        sourceCode.Resume();
        sourceCode.Write("export default ");
        sourceCode.BeginBlock();

        sourceCode.WriteLine("partPositions: [");
        sourceCode.WriteLine("    " + string.Join(", ",
            result.partialPositions.Select(p => "[" + string.Join(", ", p) + "]")));
        sourceCode.WriteLine("],");
        sourceCode.WriteLine($"totalWidth: {result.totalWidth},");
        sourceCode.WriteLine($"totalHeight: {result.totalHeight},");
        sourceCode.WriteLine($"allParts: [");
        var parts = result.partialPositions.Select((_, i) => $"drawMusicSheetPart{i + 1}");
        sourceCode.WriteLine(string.Join(", ", parts));
        sourceCode.WriteLine("]");

        sourceCode.EndBlock(true);

        sourceCode.Suspend();

        return sourceCode.ToString();
    }

    public static string GenerateCppSource(out string headerSourceCode)
    {
        var settings = new Settings
        {
            Core =
            {
                Engine = "CppTestCode"
            }
        };
        var sourceCode = new CppTestSourceBuilder();
        AlphaTab.Environment.RenderEngines.Set(
            settings.Core.Engine,
            new RenderEngineFactory(false, () => new AlphaSkiaTestCanvas(sourceCode) { WithTextLength = true })
        );

        sourceCode.Resume();

        sourceCode.WriteLine("#include \"../include/AlphaTabGeneratedTest.h\"");
        sourceCode.WriteLine();
        sourceCode.Suspend();

        var result = GenerateTestCode(settings);

        sourceCode.Resume();
        sourceCode.WriteLine($"std::array<std::array<float, 4>, {result.partialPositions.Count}> part_positions = ");
        sourceCode.Write("{");
        sourceCode.BeginBlock();

        sourceCode.WriteLine("    " + string.Join(", ",
            result.partialPositions.Select(
                p => "{" + string.Join(", ", p.Select(d => $"static_cast<float>({d})")) + "}")));

        sourceCode.Write("}");
        sourceCode.EndBlock(true);

        sourceCode.WriteLine($"int32_t total_width  = {(int)result.totalWidth};");
        sourceCode.WriteLine($"int32_t total_height  = {(int)result.totalHeight};");

        sourceCode.WriteLine($"std::array<render_function_t, {result.partialPositions.Count}> all_parts = ");
        sourceCode.BeginBlock();
        var parts = result.partialPositions.Select((_, i) => $"&draw_music_sheet_part_{i + 1}");
        sourceCode.WriteLine(string.Join(", ", parts));
        sourceCode.EndBlock(true);

        sourceCode.Suspend();

        var headerSourceCodeBuilder = new CppTestSourceBuilder();
        headerSourceCodeBuilder.Resume();

        headerSourceCodeBuilder.WriteLine("#pragma once");
        headerSourceCodeBuilder.WriteLine("#include \"AlphaSkiaTestBridge.h\"");
        headerSourceCodeBuilder.WriteLine();
        headerSourceCodeBuilder.WriteLine(
            $"extern std::array<std::array<float, 4>, {result.partialPositions.Count}> part_positions;");
        headerSourceCodeBuilder.WriteLine(
            $"extern std::array<render_function_t, {result.partialPositions.Count}> all_parts;");
        headerSourceCode = headerSourceCodeBuilder.ToString();

        return sourceCode.ToString();
    }
}