using AlphaTab;
using AlphaTab.Importer;
using AlphaTab.Rendering;

namespace TestGenerator;

public class AlphaSkiaUnitTestGenerator
{
    private static (List<double[]> partialPositions, double totalWidth, double totalHeight) GenerateTestCode(
        Settings settings)
    {
        settings.Core.UseWorkers = false;
        settings.Core.EnableLazyLoading = false;

        settings.Display.Resources.CopyrightFont.Families = new[] { "Roboto" };
        settings.Display.Resources.TitleFont.Families = new[] { "PT Serif" };
        settings.Display.Resources.SubTitleFont.Families = new[] { "PT Serif" };
        settings.Display.Resources.WordsFont.Families = new[] { "PT Serif" };
        settings.Display.Resources.EffectFont.Families = new[] { "PT Serif" };
        settings.Display.Resources.FretboardNumberFont.Families = new[] { "Roboto" };
        settings.Display.Resources.TablatureFont.Families = new[] { "Roboto" };
        settings.Display.Resources.GraceFont.Families = new[] { "Roboto" };
        settings.Display.Resources.BarNumberFont.Families = new[] { "Roboto" };
        settings.Display.Resources.FingeringFont.Families = new[] { "PT Serif" };
        settings.Display.Resources.MarkerFont.Families = new[] { "PT Serif" };

        var scoreRenderer = new ScoreRenderer(settings)
        {
            Width = 1300
        };

        using var testFileStream =
            typeof(AlphaSkiaUnitTestGenerator).Assembly.GetManifestResourceStream("TestGenerator.TestFile.gp");
        var buffer = new byte[testFileStream!.Length];
        testFileStream.ReadExactly(buffer);

        var score = ScoreLoader.LoadScoreFromBytes(buffer, settings);

        List<double[]> partialPositions = new List<double[]>();

        var totalWidth = 0.0;
        var totalHeight = 0.0;

        void HandleResult(RenderFinishedEventArgs e)
        {
            if (e.RenderResult != null)
            {
                totalWidth = e.TotalWidth;
                totalHeight = e.TotalHeight;
                partialPositions.Add(new[] { e.X, e.Y });
            }
        }

        scoreRenderer.RenderFinished.On(HandleResult);
        scoreRenderer.PartialRenderFinished.On(HandleResult);

        scoreRenderer.RenderScore(score, new double[] { 0 });

        return (
            partialPositions,
            totalWidth,
            totalHeight
        );
    }

    public static string GenerateCSharp()
    {
        var settings = new Settings
        {
            Core =
            {
                Engine = "CSharpTestCode"
            }
        };
        var sourceCode = new CSharpSourceBuilder();
        AlphaTab.Environment.RenderEngines.Set(
            settings.Core.Engine,
            new RenderEngineFactory(false, () => new AlphaSkiaTestCanvas(sourceCode))
        );

        sourceCode.Resume();
        sourceCode.WriteLine("// <auto-generated>");
        sourceCode.WriteLine("// This file has been auto generated by a unit test in alphaTab.");
        sourceCode.WriteLine("// </auto-generated>");
        sourceCode.WriteLine("namespace AlphaSkia.Test;\n");
        sourceCode.WriteLine("public class AlphaTabGeneratedRenderTest : MusicSheetRenderTest");
        sourceCode.BeginBlock();
        sourceCode.Suspend();

        var result = GenerateTestCode(settings);

        sourceCode.Resume();
        sourceCode.WriteLine("protected override float[,] PartPositions => new float[,] {");

        sourceCode.WriteLine(string.Join(", ",
            result.partialPositions.Select(p => "{" + string.Join(", ", p.Select(v => $"(float){v}")) + "}")));
        sourceCode.WriteLine("    };");
        sourceCode.WriteLine($"protected override int TotalWidth => (int){result.totalWidth};");
        sourceCode.WriteLine($"protected override int TotalHeight => (int){result.totalHeight};");
        sourceCode.WriteLine("protected override Func<AlphaSkiaCanvas, AlphaSkiaImage>[] AllParts => new[]");
        sourceCode.BeginBlock();
        var parts = result.partialPositions.Select((_, i) => $"DrawMusicSheetPart{i + 1}");
        sourceCode.WriteLine(string.Join(", ", parts));

        sourceCode.EndBlock(true);
        sourceCode.EndBlock();
        sourceCode.Suspend();

        return sourceCode.ToString();
    }

    public static string GenerateJava()
    {
        var settings = new Settings
        {
            Core =
            {
                Engine = "JavaTestCode"
            }
        };
        var sourceCode = new JavaSourceBuilder();
        AlphaTab.Environment.RenderEngines.Set(
            settings.Core.Engine,
            new RenderEngineFactory(false, () => new AlphaSkiaTestCanvas(sourceCode))
        );

        sourceCode.Resume();
        sourceCode.WriteLine("package net.alphatab.alphaskia;");
        sourceCode.WriteLine();
        sourceCode.WriteLine("public class AlphaTabGeneratedRenderTest extends MusicSheetRenderTest");
        sourceCode.BeginBlock();
        sourceCode.Suspend();

        var result = GenerateTestCode(settings);

        sourceCode.Resume();
        sourceCode.WriteLine("@Override");
        sourceCode.WriteLine("protected float[][] getPartPositions()");
        sourceCode.BeginBlock();
        {
            sourceCode.WriteLine("return new float[][]");
            sourceCode.BeginBlock();
            {
                sourceCode.WriteLine(string.Join(", ",
                    result.partialPositions.Select(p => "{" + string.Join(", ", p.Select(v => $"(float){v}")) + "}")));
            }
            sourceCode.EndBlock(true);
        }
        sourceCode.EndBlock();

        sourceCode.WriteLine("@Override");
        sourceCode.WriteLine($"protected int getTotalWidth() {{ return (int){result.totalWidth}; }}");
        sourceCode.WriteLine("@Override");
        sourceCode.WriteLine($"protected int getTotalHeight() {{ return (int){result.totalHeight}; }}");
        sourceCode.WriteLine("@Override");
        sourceCode.WriteLine("protected RenderFunction[] getAllParts()");
        sourceCode.BeginBlock();
        {
            sourceCode.WriteLine("return new RenderFunction[]");
            sourceCode.BeginBlock();
            {
                var parts = result.partialPositions.Select((_, i) => $"this::drawMusicSheetPart{i + 1}");
                sourceCode.WriteLine(string.Join(", ", parts));
            }
            sourceCode.EndBlock(true);
        }
        sourceCode.EndBlock();

        sourceCode.EndBlock();
        sourceCode.Suspend();

        return sourceCode.ToString();
    }

    public static string GenerateTypeScript()
    {
        var settings = new Settings
        {
            Core =
            {
                Engine = "TypeScriptTestCode"
            }
        };
        var sourceCode = new TypeScriptSourceBuilder();
        AlphaTab.Environment.RenderEngines.Set(
            settings.Core.Engine,
            new RenderEngineFactory(false, () => new AlphaSkiaTestCanvas(sourceCode))
        );

        sourceCode.Resume();
        
        sourceCode.WriteLine("import { MusicSheetRenderTest } from './MusicSheetRenderTest'; ");
        sourceCode.WriteLine("import { AlphaSkiaTextBaseline, AlphaSkiaTextAlign, AlphaSkiaCanvas, AlphaSkiaImage } from 'src/alphaskia'; ");
        sourceCode.WriteLine();

        sourceCode.Write("describe('AlphaTabGeneratedRenderTest', function() ");
        sourceCode.BeginBlock();
        sourceCode.WriteLine("const test = new MusicSheetRenderTest();");
        sourceCode.WriteLine("before(function () { test.before(); })");
        sourceCode.WriteLine();
        sourceCode.Suspend();

        var result = GenerateTestCode(settings);

        sourceCode.Resume();
        sourceCode.WriteLine("test.partPositions = [");
        sourceCode.WriteLine("    " + string.Join(", ",
                    result.partialPositions.Select(p => "[" + string.Join(", ", p) + "]")));
        sourceCode.WriteLine("];");
        sourceCode.WriteLine($"test.totalWidth = {result.totalWidth};");
        sourceCode.WriteLine($"test.totalHeight = {result.totalHeight};");
        sourceCode.WriteLine($"test.allParts = [");
        var parts = result.partialPositions.Select((_, i) => $"drawMusicSheetPart{i + 1}");
        sourceCode.WriteLine(string.Join(", ", parts));
        sourceCode.WriteLine("];");
        sourceCode.WriteLine();
        sourceCode.WriteLine("it('render', function() { test.render('AlphaTabGeneratedRenderTest') } )");
        sourceCode.EndBlock();
        sourceCode.WriteLine(");");
        sourceCode.Suspend();

        return sourceCode.ToString();
    }
    
}