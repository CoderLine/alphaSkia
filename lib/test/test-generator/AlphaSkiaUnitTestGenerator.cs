using AlphaTab;
using AlphaTab.Importer;
using AlphaTab.Rendering;

namespace TestGenerator;

public class AlphaSkiaUnitTestGenerator
{
    private static (List<double[]> partialPositions, double totalWidth, double totalHeight) GenerateTestCode(
        Settings settings)
    {
        settings.Core.UseWorkers = false;
        settings.Core.EnableLazyLoading = false;

        settings.Display.Resources.CopyrightFont.Families = new[] { "Roboto" };
        settings.Display.Resources.TitleFont.Families = new[] { "PT Serif" };
        settings.Display.Resources.SubTitleFont.Families = new[] { "PT Serif" };
        settings.Display.Resources.WordsFont.Families = new[] { "PT Serif" };
        settings.Display.Resources.EffectFont.Families = new[] { "PT Serif" };
        settings.Display.Resources.FretboardNumberFont.Families = new[] { "Roboto" };
        settings.Display.Resources.TablatureFont.Families = new[] { "Roboto" };
        settings.Display.Resources.GraceFont.Families = new[] { "Roboto" };
        settings.Display.Resources.BarNumberFont.Families = new[] { "Roboto" };
        settings.Display.Resources.FingeringFont.Families = new[] { "PT Serif" };
        settings.Display.Resources.MarkerFont.Families = new[] { "PT Serif" };

        var scoreRenderer = new ScoreRenderer(settings)
        {
            Width = 1300
        };

        using var testFileStream =
            typeof(AlphaSkiaUnitTestGenerator).Assembly.GetManifestResourceStream("TestGenerator.TestFile.gp");
        var buffer = new byte[testFileStream!.Length];
        testFileStream.ReadExactly(buffer);

        var score = ScoreLoader.LoadScoreFromBytes(buffer, settings);

        List<double[]> partialPositions = new List<double[]>();

        var totalWidth = 0.0;
        var totalHeight = 0.0;

        scoreRenderer.RenderFinished.On(e =>
        {
            totalWidth = e.TotalWidth;
            totalHeight = e.TotalHeight;
            partialPositions.Add(new[] { e.X, e.Y });
        });
        scoreRenderer.PartialRenderFinished.On(e =>
        {
            totalWidth = e.TotalWidth;
            totalHeight = e.TotalHeight;
            partialPositions.Add(new[] { e.X, e.Y });
        });

        scoreRenderer.RenderScore(score, [0]);

        return (
            partialPositions,
            totalWidth,
            totalHeight
        );
    }

    public static string GenerateCSharp()
    {
        var settings = new Settings
        {
            Core =
            {
                Engine = "CSharpTestCode"
            }
        };
        var sourceCode = new CSharpSourceBuilder();
        AlphaTab.Environment.RenderEngines.Set(
            settings.Core.Engine,
            new RenderEngineFactory(false, () => new AlphaSkiaTestCanvas(sourceCode))
        );

        sourceCode.WriteLine("// <auto-generated>");
        sourceCode.WriteLine("// This file has been auto generated by a unit test in alphaTab.");
        sourceCode.WriteLine("// </auto-generated>");
        sourceCode.WriteLine("namespace AlphaSkia.Test;\n");
        sourceCode.WriteLine("public class AlphaTabGeneratedRenderTest : MusicSheetRenderTest");
        sourceCode.BeginBlock();

        var result = GenerateTestCode(settings);

        sourceCode.WriteLine("protected override int[,] PartPositions => new int[,] {");
        sourceCode.WriteLine(string.Join(", ",
            result.partialPositions.Select(p => "{" + string.Join(", ", p.Select(v => (int)v)))));
        sourceCode.WriteLine("    };");
        sourceCode.WriteLine($"protected override int TotalWidth => (int){result.totalWidth};");
        sourceCode.WriteLine($"protected override int TotalHeight => (int){result.totalHeight};");
        sourceCode.WriteLine("protected override Func<AlphaSkiaCanvas, AlphaSkiaImage>[] AllParts => new[]");
        sourceCode.BeginBlock();
        var parts = result.partialPositions.Select((_, i) => $"DrawMusicSheetPart{i + 1}");
        sourceCode.WriteLine(string.Join(", ", parts));

        sourceCode.EndBlock();

        return sourceCode.ToString();
    }

    public static string GenerateJava()
    {
        var settings = new Settings
        {
            Core =
            {
                Engine = "JavaTestCode"
            }
        };
        var sourceCode = new JavaSourceBuilder();
        AlphaTab.Environment.RenderEngines.Set(
            settings.Core.Engine,
            new RenderEngineFactory(false, () => new AlphaSkiaTestCanvas(sourceCode))
        );

        sourceCode.WriteLine("package net.alphatab.alphaskia;");
        sourceCode.WriteLine();
        sourceCode.WriteLine("public class AlphaTabGeneratedRenderTest extends MusicSheetRenderTest");
        sourceCode.BeginBlock();

        var result = GenerateTestCode(settings);

        sourceCode.WriteLine("@Override");
        sourceCode.WriteLine("protected int[] getPartPositions() { return new int[][] {");
        sourceCode.WriteLine(string.Join(", ",
            result.partialPositions.Select(p => "{" + string.Join(", ", p.Select(v => (int)v)))));
        sourceCode.WriteLine("    };");
        sourceCode.WriteLine("@Override");
        sourceCode.WriteLine($"protected int getTotalWidth() {{ return (int){result.totalWidth}; }}");
        sourceCode.WriteLine("@Override");
        sourceCode.WriteLine($"protected int getTotalHeight() {{ return (int){result.totalHeight}; }}");
        sourceCode.WriteLine("@Override");
        sourceCode.WriteLine("protected override RenderFunction[] getAllParts() { return new RenderFunction[]");
        sourceCode.BeginBlock();
        var parts = result.partialPositions.Select((_, i) => $"this::drawMusicSheetPart{i + 1}");
        sourceCode.WriteLine(string.Join(", ", parts));

        sourceCode.EndBlock();

        return sourceCode.ToString();
    }
}