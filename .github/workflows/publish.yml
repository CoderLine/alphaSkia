on:
  workflow_dispatch:
    inputs:
      is-release-build:
        type: boolean
        description: Is Release Build
        default: false
      use-skia-cache:
        type: boolean
        description: Use Skia Binary from cache
        default: false
env:
  IS_RELEASE_BUILD: ${{ inputs.is-release-build }}

jobs:
  build:
    uses: ./.github/workflows/~reusable-full-build.yml
    with: 
      use-skia-cache: ${{ inputs.use-skia-cache }} 
      is-release-build: ${{ inputs.is-release-build }}
    secrets: inherit

  dotnet-publish: 
    runs-on: ubuntu-latest
    needs: [build]
    env:
      NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9'      
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: nuke
          path: build/bin/Debug/publish/
      - uses: actions/download-artifact@v4
        with:
          name: nupkgs
          path: dist/.organize/nupkgs
      - run: dotnet build/bin/Debug/publish/_build.dll DotNetPublish

  java-publish: 
    runs-on: ubuntu-latest
    needs: [build]
    env:
      ORG_GRADLE_PROJECT_mavenCentralUsername: ${{secrets.OSSRH_USERTOKEN_USERNAME}}
      ORG_GRADLE_PROJECT_mavenCentralPassword: ${{secrets.OSSRH_USERTOKEN_PASSWORD}}
      ORG_GRADLE_PROJECT_signingInMemoryKeyId: ${{secrets.SONATYPE_SIGNING_KEY_ID}}
      ORG_GRADLE_PROJECT_signingInMemoryKeyPassword: ${{secrets.SONATYPE_SIGNING_PASSWORD}}
      ORG_GRADLE_PROJECT_signingInMemoryKey: ${{secrets.SONATYPE_SIGNING_KEY}}

    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9'      
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: nuke
          path: build/bin/Debug/publish/
      - uses: actions/download-artifact@v4
        with:
          # workaround until we know how to upload existing maven packages
          # https://discuss.gradle.org/t/how-to-push-maven-to-ossrh-from-previous-local-publish/46875
          # name: maven
          # path: dist/.organize/maven
          path: dist/.organize
      - run: dotnet build/bin/Debug/publish/_build.dll JavaPublish

  node-publish: 
    runs-on: ubuntu-latest
    needs: [build]
    env:
      NPMJS_AUTH_TOKEN: ${{ secrets.NPMJS_AUTH_TOKEN }}
    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9'      
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: nuke
          path: build/bin/Debug/publish/
      - uses: actions/download-artifact@v4
        with:
          name: nodetars
          path: dist/.organize/node
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          registry-url: https://registry.npmjs.org/
      - run: dotnet build/bin/Debug/publish/_build.dll NodePublish